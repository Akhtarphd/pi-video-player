Purpose:
  SWMBO decorates her office with a cardboard fireplace over the
  holidays. She uses brick patterned wrapping paper and a picture of a
  fireplace. I thought it would be very cool to use a retired monitor
  to loop a video of a fireplace (running on a Raspberry Pi Zero) and
  use that to replace the picture. To add some functionality connect a
  switch to a couple GPIO pins and pressing on the switch will rotate
  through available videos. A long press will pause the video player
  and is useful if you need to do something at the console.

  The next step is to be able to cycle through videos (and to stop the
  video when I want to do something at the console.) For that I chose to
  use a shell script operating based on some files written to /tmp (*)
  and a Python script to read inputs from a GPIO pin and manage the files.

  (*) This runs on a Pi configured for a readonly file system but /tmp
  is in RAM and can be written.

Status:
  Software is deployed and working and delivered to dazzle co-workers of
  SWMBO. :D

Bugs/TODO:
  Videos are read from my home directory. (/home/hbarta/Videos) It is
  left as an upgrade to use the $HOME directory or specify a directory
  on the command line.

  Abstract the press/long press functionality out of myFallingCallback()

Strategy for fireplace videos

 fireplace.sh
    Reads video name from /tmp/nextVideo and then deletes the file.
    If the file does not exist on startup it will loop until it is.
    It does not play the video if /tmp/StopFireplace exists.  If both
    /tmp/StopFireplace and /tmp/nextVideo do not exist, it will loop
    the same video (if a video name has already been read in.)

 
  controlVideo.py
      Read the Videos from /home/hbarta/Videos and write the first
      one to /tmp/nextVideo.
      Monitor the pushbutton. On a short press, it will:
       - write the next video to /tmp/nextVideo
       - delete /tmp/StopFireplace
       - killall omxplayer (to get fireplace.sh to read the video name.)
      On a long press it will 
       - create /tmp/StopFireplace
  
Setup:
  The first iteration was using Raspbian/Jessie Lite on a 4GB card.
  There is no need for a GUI for this project. This worked fine until
  I wanted to add more videos. When I tried to copy the 4GB imge to a
  16GB card and expand the user partition (On an Intel/Linux desktop)
  I was unable to do so because gparted claimed there was a problem
  with the partitions. At that point I found I was unable to back out
  of the readonly setup in order to update/install new software too.
  I wound up just installing again to the 16GB card and copying my
  scripts there.

  There are Python requirements that you will be appraised of when the
  Python script starts up.

  omxplayer is used to play the videos and is installed on most distros
  I have tried. One trweak to get capability to run omxplayer as a user
  is to create the following file:

    echo 'SUBSYSTEM=="vchiq",GROUP="video",MODE="0660"' > /etc/udev/rules.d/10-vchiq-permissions.rules

  The user this runs as must be a member of group 'gpio'. There are
  commands to do this but I usually just edit /etc/group as root/sudo.

  Finally, there needs to be a way to run this. I added the followinbg
  line to my crontab ( 'crontab -e' to edit crontab.)

    #@reboot /home/hbarta/bin/runVideo.sh

  And the script that runs is:

    hbarta@allred:~/Documents/pi-video-player $ cat /home/hbarta/bin/runVideo.sh
    #!/bin/sh
    /home/hbarta/bin/fireplace.sh >/tmp/fp.txt 2>&1 &
    /home/hbarta/bin/controlVideo.py >/tmp/ct.txt 2>&1 &

    hbarta@allred:~/Documents/pi-video-player $ 
  
  H/W configuration. 

    This runs on a Pi Zero which does not have pins installed on the
    GPIO connections. I soldered single pins to pin 6 (ground) and 12
    (GPIO18). This GPIO pin is configured (in S/W) with an internal
    pullup resistor. It will read high with nothing connected. Short it
    to ground and it will read zero. I soldered a momentary contact
    pushbutton to a couple Dupont jumpers which I plug onto the pins.

  Readonly filesystem configuration.

    The final step once everything is working is to make the root
    filesystem readonly. That way it is safe to just shut off power with
    no risk of corrupting the file system.  I followed the instructions
    in the second post in this thread:

      https://www.raspberrypi.org/forums/viewtopic.php?f=29&t=22596

    An earlier release used the instructions at 

      https://hallard.me/raspberry-pi-read-only/`

    But as already mentioned, I was unable to back out those changes
    when needed.
